//sender
// Define base addresses
#define RCC_BASE        0x40021000
#define GPIOB_BASE      0x40010C00
#define USART3_BASE     0x40004800

// Define register pointers
#define RCC_APB2ENR     (*(volatile unsigned int *) (RCC_BASE + 0x18))
#define RCC_APB1ENR     (*(volatile unsigned int *) (RCC_BASE + 0x1C))
#define GPIOB_CRH       (*(volatile unsigned int *) (GPIOB_BASE + 0x04))
#define USART3_SR       (*(volatile unsigned int *) (USART3_BASE + 0x00))
#define USART3_DR       (*(volatile unsigned int *) (USART3_BASE + 0x04))
#define USART3_BRR      (*(volatile unsigned int *) (USART3_BASE + 0x08))
#define USART3_CR1      (*(volatile unsigned int *) (USART3_BASE + 0x0C))

int main() {
    // 1. Enable GPIOB and USART3 clocks
    RCC_APB2ENR |= (1 << 3);    // GPIOB clock enable
    RCC_APB2ENR |= (1 << 0);    // AFIO clock enable
    RCC_APB1ENR |= (1 << 18);   // USART3 clock enable

    // 2. Configure PB10 as TX, PB11 as RX
    GPIOB_CRH &= ~((0xF << 8) | (0xF << 12)); // Clear PB10, PB11
    GPIOB_CRH |= (0xB << 8);   // PB10 = Alt function output push-pull
    GPIOB_CRH |= (0x8 << 12);  // PB11 = Input with pull-up/down

    // 3. Set baud rate
    int system_clock = 72000000;
    int baud_rate = 9600;
    USART3_BRR = (system_clock + (baud_rate / 2)) / baud_rate;

    // 4. Enable transmitter
    USART3_CR1 |= (1 << 3);  // TE

    // 5. Enable USART3
    USART3_CR1 |= (1 << 13); // UE

    // 6. Send character in a loop
    while (1) {
        char ch = 'U';

        while (!(USART3_SR & (1 << 7))); // Wait for TXE
        USART3_DR = ch;
    }

    return 0;
}

// Reciever
// Define base addresses
#define RCC_BASE        0x40021000
#define GPIOB_BASE      0x40010C00
#define USART3_BASE     0x40004800

// Define register pointers
#define RCC_APB2ENR     (*(volatile unsigned int *) (RCC_BASE + 0x18))
#define RCC_APB1ENR     (*(volatile unsigned int *) (RCC_BASE + 0x1C))
#define GPIOB_CRH       (*(volatile unsigned int *) (GPIOB_BASE + 0x04))
#define USART3_SR       (*(volatile unsigned int *) (USART3_BASE + 0x00))
#define USART3_DR       (*(volatile unsigned int *) (USART3_BASE + 0x04))
#define USART3_BRR      (*(volatile unsigned int *) (USART3_BASE + 0x08))
#define USART3_CR1      (*(volatile unsigned int *) (USART3_BASE + 0x0C))

int main() {
    // 1. Enable GPIOB and USART3 clocks
    RCC_APB2ENR |= (1 << 3);    // GPIOB clock enable
    RCC_APB2ENR |= (1 << 0);    // AFIO clock enable
    RCC_APB1ENR |= (1 << 18);   // USART3 clock enable

    // 2. Configure PB10 as TX, PB11 as RX
    GPIOB_CRH &= ~((0xF << 8) | (0xF << 12)); // Clear PB10, PB11
    GPIOB_CRH |= (0xB << 8);   // PB10 = Alt function output push-pull
    GPIOB_CRH |= (0x8 << 12);  // PB11 = Input with pull-up/down

    // 3. Set baud rate
    int system_clock = 72000000;
    int baud_rate = 9600;
    USART3_BRR = (system_clock + (baud_rate / 2)) / baud_rate;

    // 4. Enable receiver
    USART3_CR1 |= (1 << 2);  // RE

    // 5. Enable USART3
    USART3_CR1 |= (1 << 13); // UE

    // 6. Receive character loop
    char received_char = 0;
    while (1) {
        while (!(USART3_SR & (1 << 5))); // Wait for RXNE
        received_char = USART3_DR;

        // Optional: echo back
        while (!(USART3_SR & (1 << 7))); // TXE
        USART3_DR = received_char;
    }

    return 0;
}
